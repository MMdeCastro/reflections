What happens when you initialize a repository? Why do you need to do it?

   A hidden .git folder is created, which contains configuration and other info

How is the staging area different from the working directory and the repository? what value do you think it offers?

   The staging are only contains the files that will commit, not the whole working directory and the repository, it is a kind of check before creating a checkout

How can you use the staging area to make sure you have one commit per logical change?

   I am not sure, I think I can stage files and check if the differences between them are well defined as logical changes

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

   If I need a private developing branch, an experimental one, a featured one,... Branches help to organize versions

How do the diagrams help you visualize the branch structure?

   A diagram shows the complete picture simultaneously, including potential orphan commits

What is the result of merging two branches together? Why do we represent it in the deiagram thwe way we do?

   If I am in branch1 and I do git merge branch2, branch1 will change due to the inclusion of the lines that were in branch2 but not in branch1 or in the original or the removal of the ones that were not in branch2 and in the original (other changes will fail the automatical merge and we will need to solve the conflicts manually). After the merge, branch2 remains the same, we can also delete it since its commits will be included in the branch1 log. The log --graph shows a physical representation that helps to visualize the paths.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

   Pro: get rid of the obvious merges, cons: the automatic merging might not decide properly on what obvious means.


